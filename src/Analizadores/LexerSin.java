
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.FileWriter;
import java.io.PrintWriter;
import Analizadores.Tokens;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LexerSin extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public LexerSin() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LexerSin(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LexerSin(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\024\003\013\004\015\005\007\006\014\007" +
    "\004\010\006\011\011\012\005\013\010\001\002\000\026" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\001\002\000\026\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\001\002\000\026\002\ufffa\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\001\002\000\026\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\001\002\000\026\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\001" +
    "\002\000\026\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\001\002\000" +
    "\026\002\020\003\013\004\015\005\007\006\014\007\004" +
    "\010\006\011\011\012\005\013\010\001\002\000\026\002" +
    "\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\001\002\000\026\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\001\002\000\026\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\001\002\000\024\003\013\004\015\005\007\006" +
    "\014\007\004\010\006\011\011\012\005\013\010\001\002" +
    "\000\026\002\000\003\000\004\000\005\000\006\000\007" +
    "\000\010\000\011\000\012\000\013\000\001\002\000\004" +
    "\002\001\001\002\000\026\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\006\002\015\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LexerSin$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LexerSin$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LexerSin$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

     //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {        
   
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LexerSin$actions {



  private final LexerSin parser;

  /** Constructor */
  CUP$LexerSin$actions(LexerSin parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LexerSin$do_action_part00000000(
    int                        CUP$LexerSin$act_num,
    java_cup.runtime.lr_parser CUP$LexerSin$parser,
    java.util.Stack            CUP$LexerSin$stack,
    int                        CUP$LexerSin$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LexerSin$result;

      /* select the action based on the action number */
      switch (CUP$LexerSin$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prueba EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)).value;
		RESULT = start_val;
              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LexerSin$parser.done_parsing();
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prueba ::= E E 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("prueba",1, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prueba ::= prueba E 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("prueba",1, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.elementAt(CUP$LexerSin$top-1)), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= mas 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= menos 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= por 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= div 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= pareni 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= parend 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= puntocoma 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= num 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= error 
            {
              String RESULT =null;

              CUP$LexerSin$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerSin$stack.peek()), RESULT);
            }
          return CUP$LexerSin$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LexerSin$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LexerSin$do_action(
    int                        CUP$LexerSin$act_num,
    java_cup.runtime.lr_parser CUP$LexerSin$parser,
    java.util.Stack            CUP$LexerSin$stack,
    int                        CUP$LexerSin$top)
    throws java.lang.Exception
    {
              return CUP$LexerSin$do_action_part00000000(
                               CUP$LexerSin$act_num,
                               CUP$LexerSin$parser,
                               CUP$LexerSin$stack,
                               CUP$LexerSin$top);
    }
}

}
